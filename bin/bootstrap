#!/bin/bash

set -e

check_dep() {
  command -v $1 >/dev/null 2>&1 || { printf >&2 "%s is required but not installed. Aborting.\n" $1; exit 1; }
}

# only works in us-east-1 for now
export AWS_DEFAULT_REGION=us-east-1

check_dep "pwgen"
check_dep "aws"

# This variable will be used as the cloudformation stack name and the associated
# ECS cluster.
STACK="empire-$(pwgen 10 1)"
# TODO: make it so people can override this with envvars
ZONES=$(aws ec2 describe-availability-zones --query 'AvailabilityZones[*].ZoneName' --output text | awk '{print $1, $2}')
# have to escape commas in parameters for aws cli
SAFEZONES=$(echo $ZONES | sed -e 's/ /\\,/g')

read -p "Docker user: " docker_user
read -s -p "Docker pass: " docker_pass
printf "\n"
read -p "Docker email: " docker_email
read -p "AWS KeyName: " keyname

echo "==> Launching empire in AZs: $ZONES"

printf "==> Creating ECS service: %s\n" $STACK
aws ecs create-cluster --cluster-name "$STACK" > /dev/null

printf "==> Creating cloudformation stack: %s\n" $STACK
aws cloudformation create-stack \
  --stack-name "$STACK" \
  --template-body file://$PWD/docs/guide/cloudformation.json \
  --parameters \
      ParameterKey=EcsCluster,ParameterValue="$STACK" \
      ParameterKey=DesiredCapacity,ParameterValue=5 \
      ParameterKey=MaxCapacity,ParameterValue=10 \
      ParameterKey=DockerUser,ParameterValue="$docker_user" \
      ParameterKey=DockerPass,ParameterValue="$docker_pass" \
      ParameterKey=DockerEmail,ParameterValue="$docker_email" \
      ParameterKey=AvailabilityZones,ParameterValue="$SAFEZONES" \
      ParameterKey=KeyName,ParameterValue="$keyname" \
  --capabilities CAPABILITY_IAM > /dev/null

printf "==> Waiting for stack to complete\n"
stack_status=""
while [ "$stack_status" != "CREATE_COMPLETE" ]; do
  sleep 1
  printf '\033[2K\r'
  printf "==> Status: %s" $stack_status
  stack_status=$(aws cloudformation describe-stacks --stack-name "$STACK" --output text --query 'Stacks[0].StackStatus' 2>/dev/null)
  if [ "$stack_status" == "ROLLBACK_COMPLETE" ]; then
    printf "\nStack creation failed, check AWS cloudformation console for details.\n"
    exit 1
  fi
done

printf "\n==> Writing environment variables to .env file\n"

# Returns the value of a named output from the created stack.
output() {
  aws cloudformation describe-stacks --stack-name $STACK --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' --output text | grep $1 | cut -f 2
}

echo "AWS_REGION=$REGION" > .env
echo "AWS_ACCESS_KEY_ID=$(output AccessKeyId)" >> .env
echo "AWS_SECRET_ACCESS_KEY=$(output SecretAccessKey)" >> .env
echo "EMPIRE_ELB_VPC_ID=$(output VPC)" >> .env
echo "EMPIRE_ELB_SG_PRIVATE=$(output InternalELBSG)" >> .env
echo "EMPIRE_ELB_SG_PUBLIC=$(output ExternalELBSG)" >> .env
echo "EMPIRE_ECS_CLUSTER=$STACK" >> .env
echo "EMPIRE_ECS_SERVICE_ROLE=$(output ServiceRole)" >> .env
echo "EMPIRE_EC2_SUBNETS_PRIVATE=$(output Subnets)" >> .env
echo "EMPIRE_EC2_SUBNETS_PUBLIC=$(output Subnets)" >> .env
echo "EMPIRE_ROUTE53_INTERNAL_ZONE_ID=$(output InternalZoneID)" >> .env
